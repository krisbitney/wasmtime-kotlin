package eth.krisbitney.wasmtime

import eth.krisbitney.wasmtime.wasm.ErrorFrame
import kotlinx.cinterop.*
import wasmtime.*

/**
 * Represents a Wasmtime error, which is an error generated by the Wasmtime runtime during execution.
 *
 * @property message The error message as a string.
 * @property exitStatus The WASI-specific exit status if the error is a WASI "exit" trap, or `null` if the error is not a WASI exit trap.
 * @property wasmTrace A list of [ErrorFrame] instances representing the WebAssembly stack trace associated with the error.
 *
 * @constructor Constructs a new [WasmtimeException] from the given [wasmtime_error_t] pointer.
 * @param error The C pointer to a [wasmtime_error_t] struct.
 */
class WasmtimeException(private val error: CPointer<wasmtime_error_t>) : Throwable() {

    override val message: String by lazy {
        memScoped {
            val message = alloc<wasm_name_t>()
            wasmtime_error_message(error, message.ptr)
            val result = message.data?.toKString() ?: ""
            wasm_byte_vec_delete(message.ptr)
            result
        }
    }

    val exitStatus: Int? by lazy {
        memScoped {
            val status = alloc<IntVar>()
            val hasStatus = wasmtime_error_exit_status(error, status.ptr)
            if (hasStatus) status.value else null
        }
    }

    val wasmTrace: List<ErrorFrame> by lazy {
        memScoped {
            val frameVec = alloc<wasm_frame_vec_t>()
            wasmtime_error_wasm_trace(error, frameVec.ptr)

            val frames = List(frameVec.size.toInt()) { index ->
                ErrorFrame(frameVec.data?.get(index)!!)
            }

            wasm_frame_vec_delete(frameVec.ptr)

            frames
        }
    }

    init {
        wasmtime_error_delete(error)
    }
}